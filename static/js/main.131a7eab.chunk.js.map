{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Wrapper/index.js","components/Container/index.js","components/Planet/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","gameScore","topScore","Footer","href","title","Wrapper","children","Container","Planet","onClick","handleOnClick","id","alt","name","src","image","App","state","planets","randomizeOrder","oldPlanets","sort","Math","random","resetClicks","map","planet","clicked","continueGame","mappedPlanets","console","log","_this","setState","gameOver","resetPlanets","newTopScore","event","newPlanets","this","_this2","components_Wrapper","components_Header","components_Container","components_Planet","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.131a7eab.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Header(props) {\n  return (\n      <div className=\"header\">\n        <h1>Deep Space Clicky Game</h1>\n        <p>Game Score: {props.gameScore} | Top Score: {props.topScore}</p>\n      </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <p>Icons made by <a href=\"https://www.flaticon.com/packs/space-85\" title=\"monkik\">monkik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\">CC 3.0 BY</a> | App made by <a href=\"https://github.com/JohnKing93\">Johnny King</a></p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main>{props.children}</main>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container\"><div className=\"row\">{props.children}</div></div>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Planet(props) {\n  return (\n    <div className=\"col-sm-4\">\n      <div className=\"spacing\" onClick={() => props.handleOnClick(props.id)}>\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Planet;\n","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Container from \"./components/Container\";\nimport Planet from \"./components/Planet\";\nimport planets from \"./planets.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    planets,\n    gameScore: 0,\n    topScore: 0\n  }\n\n  componentDidMount() {\n    const newPlanets = this.resetClicks(this.state.planets);\n    this.setState({ planets: this.randomizeOrder(newPlanets) });\n  }\n\n  randomizeOrder = oldPlanets => {\n    let newPlanets = oldPlanets.sort(() => { return 0.5 - Math.random() });;\n    return newPlanets;\n  };\n\n  resetClicks = oldPlanets => {\n    const newPlanets = oldPlanets.map(planet => {\n      planet.clicked = false;\n      return planet;\n    });\n    return newPlanets;\n  };\n\n  continueGame = mappedPlanets => {\n    console.log(\"Continue Game\");\n    this.setState({\n      planets: this.randomizeOrder(mappedPlanets),\n      gameScore: this.state.gameScore + 1\n    });\n  }\n\n  gameOver = mappedPlanets => {\n    console.log(\"Game Over\");\n    const resetPlanets = this.resetClicks(mappedPlanets);\n    const newTopScore = this.state.gameScore > this.state.topScore ? this.state.gameScore : this.state.topScore;\n    this.setState({\n      planets: this.randomizeOrder(resetPlanets),\n      gameScore: 0,\n      topScore: newTopScore\n    });\n  }\n\n  handleOnClick = event => {\n    let gameOver = false;\n    const mappedPlanets = this.state.planets.map(planet => {\n      if (planet.id === event) {\n        planet.clicked ? gameOver = true : planet.clicked = true;\n      }\n      return planet;\n    });\n    gameOver ? this.gameOver(mappedPlanets) : this.continueGame(mappedPlanets);\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Header \n          gameScore={this.state.gameScore}\n          topScore={this.state.topScore}\n        />\n        <Container>\n          {this.state.planets.map(planet => (\n            <Planet\n              id={planet.id}\n              key={planet.id}\n              name={planet.name}\n              image={planet.image}\n              handleOnClick={this.handleOnClick}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}